// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
const tg = window.Telegram.WebApp;
tg.expand();
tg.BackButton.hide();
tg.enableClosingConfirmation(); // –ó–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const TARGET_WALLET = "0:89377d334e77ab890981dd864838594dc9fab1d1d7767551c83240621b627b6a";
const TONAPI_KEY = "AFRZNCR5WAER3PAAAAAK3QMOTEGWUDBAQHM6ENRCKMLK4GCPEKP2O362SZ4LGWIXAO7Q5PI";
const PANDAFIT_GAME_URL = "https://t.me/PandaFiT_bot/PandaFiT?startapp=rId444104761";

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const headerWalletAreaEl = document.getElementById('header-wallet-area');
const tonConnectButtonHeaderEl = document.getElementById('ton-connect-button-header');
const userInfoHeaderEl = document.getElementById('user-info-header');
const usernameDisplayEl = document.getElementById('username-display');
const walletAddressDisplayEl = document.getElementById('wallet-address-display');
const menuButtonEl = document.getElementById('menu-button');

const profilePhotoEl = document.getElementById('profile-photo');
const shortInfoEl = document.getElementById('short-info');
const donationsInfoEl = document.getElementById('donations-info');

const playGameBtn = document.getElementById('play-game');
const customButton1 = document.getElementById('custom-button-1');
const customButton2 = document.getElementById('custom-button-2');

const popupMenuEl = document.getElementById('popup-menu');
const disconnectWalletButtonEl = document.getElementById('disconnect-wallet-button');
const closeMenuButtonEl = document.getElementById('close-menu-button');

// --- TON Connect --- 
const tonConnectUI = new TON_CONNECT_UI.TonConnectUI({
    manifestUrl: 'https://pfworld.vercel.app/tonconnect-manifest.json',
    buttonRootId: 'ton-connect-button-header',
    actionsConfiguration: {
        twaReturnUrl: `https://t.me/${tg.initDataUnsafe?.bot_username || 'bot'}/${tg.initDataUnsafe?.start_param || 'app'}`
    }
});

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ UI –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
function updateUiOnWalletStateChange(isConnected, friendlyAddress = null) {
    if (isConnected && friendlyAddress) {
        tonConnectButtonHeaderEl.style.display = 'none';
        userInfoHeaderEl.style.display = 'flex';
        walletAddressDisplayEl.textContent = `${friendlyAddress.slice(0, 4)}...${friendlyAddress.slice(-4)}`;
    } else {
        tonConnectButtonHeaderEl.style.display = 'flex'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É TON Connect
        userInfoHeaderEl.style.display = 'none';
        walletAddressDisplayEl.textContent = '';
        donationsInfoEl.innerHTML = '<p>–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–Ω–∞—Ç–æ–≤.</p>';
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ Username –∏ –¥—Ä—É–≥–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ Telegram
function displayTelegramUserInfo() {
    const user = tg.initDataUnsafe?.user;
    if (user) {
        usernameDisplayEl.textContent = user.username ? `@${user.username}` : `${user.first_name}${user.last_name ? ' ' + user.last_name : ''}`;
        profilePhotoEl.textContent = '–§–û–¢–û'; // –ó–∞–≥–ª—É—à–∫–∞
    } else {
        usernameDisplayEl.textContent = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        profilePhotoEl.textContent = '–§–û–¢–û';
    }
    shortInfoEl.textContent = '–ò–Ω—Ñ–æ (–±–ª–æ–∫ 7)'; 
    playGameBtn.innerHTML = 'üéÆ'; 
}

// –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
tonConnectUI.onStatusChange(async walletAndAccount => {
    if (walletAndAccount) {
        const friendlyAddress = TON_CONNECT_UI.toUserFriendlyAddress(walletAndAccount.account.address, walletAndAccount.account.chain === TON_CONNECT_UI.CHAIN.TESTNET);
        localStorage.setItem('wallet', friendlyAddress);
        updateUiOnWalletStateChange(true, friendlyAddress);
        tg.sendData(JSON.stringify({ wallet: friendlyAddress })); 
        console.log('–ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω:', friendlyAddress);
        await checkDonations();
    } else {
        localStorage.removeItem('wallet');
        updateUiOnWalletStateChange(false);
        console.log('–ö–æ—à–µ–ª–µ–∫ –æ—Ç–∫–ª—é—á–µ–Ω.');
    }
});

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ–Ω–∞—Ç–∞–º–∏ (–≤ —Ü–µ–ª–æ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∫—Ä–æ–º–µ –≤—ã–∑–æ–≤–∞)
async function checkDonations() {
    const wallet = localStorage.getItem('wallet');
    if (!wallet) {
        donationsInfoEl.innerHTML = '<p>–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–Ω–∞—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫.</p>';
        return;
    }
    donationsInfoEl.innerHTML = '<p><small>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ–Ω–∞—Ç–∞—Ö...</small></p>';
    try {
        const response = await fetch(`https://tonapi.io/v2/blockchain/accounts/${wallet}/transactions?limit=200`, {
            headers: { 'Authorization': `Bearer ${TONAPI_KEY}` }
        });
        if (!response.ok) throw new Error(`API Error: ${response.status} ${await response.text()}`);
        const data = await response.json();
        const transactions = data.transactions || [];
        let total = 0;
        const monthly = {};
        if (transactions.length === 0) {
            displayDonations(total, monthly, true);
            return;
        }
        transactions.forEach(tx => {
            tx.out_msgs?.forEach(msg => {
                if (msg.destination?.address === TARGET_WALLET) {
                    const value = parseInt(msg.value) / 1e9;
                    if (isNaN(value)) return;
                    const date = new Date(tx.utime * 1000);
                    const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;
                    total += value;
                    monthly[monthKey] = (monthly[monthKey] || 0) + value;
                }
            });
        });
        displayDonations(total, monthly);
    } catch (error) {
        donationsInfoEl.innerHTML = '<p><small>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ–Ω–∞—Ç–∞—Ö.</small></p>';
        console.error('Error checking donations:', error);
    }
}

function displayDonations(total, monthly, noTransactions = false) {
    const monthNames = {
        '01': '–Ø–Ω–≤', '02': '–§–µ–≤', '03': '–ú–∞—Ä', '04': '–ê–ø—Ä',
        '05': '–ú–∞–π', '06': '–ò—é–Ω', '07': '–ò—é–ª', '08': '–ê–≤–≥',
        '09': '–°–µ–Ω', '10': '–û–∫—Ç', '11': '–ù–æ—è', '12': '–î–µ–∫'
    };
    if (noTransactions && total === 0) {
        donationsInfoEl.innerHTML = '<p>–î–æ–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</p>';
        return;
    }
    let html = `<p>–û–±—â–∏–π –¥–æ–Ω–∞—Ç: <b>${total.toFixed(2)} TON</b></p>`;
    if (Object.keys(monthly).length > 0) {
      html += '<h3>–ü–æ –º–µ—Å—è—Ü–∞–º:</h3>';
      Object.entries(monthly)
          .sort(([a], [b]) => b.localeCompare(a)) // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –¥–∞—Ç—ã
          .forEach(([month, amount]) => {
              const [year, monthNum] = month.split('-');
              html += `<p><small>${year} ${monthNames[monthNum]} ‚Äî ${amount.toFixed(2)} TON</small></p>`;
          });
    } else if (total > 0) {
      // html += '<p><small>–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.</small></p>';
    } else {
      html += '<p>–î–æ–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</p>';
    }
    donationsInfoEl.innerHTML = html;
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–ø–ª—ã–≤–∞—é—â–∏–º –º–µ–Ω—é
menuButtonEl.addEventListener('click', () => {
    popupMenuEl.style.display = 'flex';
});

closeMenuButtonEl.addEventListener('click', () => {
    popupMenuEl.style.display = 'none';
});

disconnectWalletButtonEl.addEventListener('click', async () => {
    await tonConnectUI.disconnect(); // –û—Ç–∫–ª—é—á–∞–µ–º –∫–æ—à–µ–ª–µ–∫ —á–µ—Ä–µ–∑ TON Connect
    popupMenuEl.style.display = 'none';
    // onStatusChange –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ –æ–±–Ω–æ–≤–∏—Ç UI
    console.log('–ö–æ–º–∞–Ω–¥–∞ –Ω–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
customButton1.addEventListener('click', () => console.log('Custom Button 1 (–ö–Ω–æ–ø–∫–∞ 5) clicked'));
customButton2.addEventListener('click', () => console.log('Custom Button 2 (–ö–Ω–æ–ø–∫–∞ 6) clicked'));
playGameBtn.addEventListener('click', () => tg.openTelegramLink(PANDAFIT_GAME_URL));

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', async () => {
    tg.ready();
    displayTelegramUserInfo();
    // –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
    const wasConnected = await tonConnectUI.connectionRestored;
    if (wasConnected) {
        console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∫–æ—à–µ–ª—å–∫–æ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', tonConnectUI.wallet);
        if (tonConnectUI.wallet) {
            const friendlyAddress = TON_CONNECT_UI.toUserFriendlyAddress(tonConnectUI.wallet.account.address, tonConnectUI.wallet.account.chain === TON_CONNECT_UI.CHAIN.TESTNET);
            updateUiOnWalletStateChange(true, friendlyAddress);
            localStorage.setItem('wallet', friendlyAddress); // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤ LS –µ—Å—Ç—å –∞–¥—Ä–µ—Å
            await checkDonations();
        } else {
             updateUiOnWalletStateChange(false);
        }
    } else {
        console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∫–æ—à–µ–ª—å–∫–æ–º –ù–ï –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.');
        updateUiOnWalletStateChange(false);
    }
}); 